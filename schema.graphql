enum MarketVersion {
  V1
  V2
}

# -------------------------------------------------------------------------- #
#                            WildcatArchController                           #
# -------------------------------------------------------------------------- #

type ArchController @entity {
  id: ID!
  controllerFactories: [ControllerFactory!]!
    @derivedFrom(field: "archController")
  controllers: [Controller!]! @derivedFrom(field: "archController")
  markets: [Market!]! @derivedFrom(field: "archController")
  borrowers: [RegisteredBorrower!]! @derivedFrom(field: "archController")
  hooksFactory: HooksFactory @derivedFrom(field: "archController")
}

type RegisteredBorrower @entity {
  id: ID!
  archController: ArchController!
  borrower: Bytes!
  isRegistered: Boolean!
  changes: [BorrowerRegistrationChange!]! @derivedFrom(field: "registration")
}

type BorrowerRegistrationChange @entity(immutable: true) {
  id: ID!
  registration: RegisteredBorrower!
  isRegistered: Boolean!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type ControllerFactoryRemoved @entity(immutable: true) {
  id: ID!
  controllerFactory: ControllerFactory!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type ControllerRemoved @entity(immutable: true) {
  id: ID!
  controller: Controller!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type MarketRemoved @entity(immutable: true) {
  id: ID!
  market: Market!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type ControllerAdded @entity(immutable: true) {
  id: ID!
  controllerFactory: ControllerFactory! # address
  controller: Controller! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type ControllerFactoryAdded @entity(immutable: true) {
  id: ID!
  controllerFactory: ControllerFactory! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type MarketAdded @entity(immutable: true) {
  id: ID!
  controller: Controller! # address
  market: Market! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type OwnershipHandoverCanceled @entity(immutable: true) {
  id: ID!
  pendingOwner: Bytes! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type OwnershipHandoverRequested @entity(immutable: true) {
  id: ID!
  pendingOwner: Bytes! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: ID!
  oldOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# type GlobalAccount @entity {
#   id: ID!
#   authorizations: [LenderAuthorization!]! @derivedFrom(field: "account")
# }

# -------------------------------------------------------------------------- #
#                       WildcatMarketControllerFactory                       #
# -------------------------------------------------------------------------- #

type ControllerFactory @entity {
  id: ID!
  sentinel: Bytes! # address
  feeRecipient: Bytes! # address
  protocolFeeBips: Int!
  originationFeeAsset: Bytes! # address
  originationFeeAmount: BigInt!
  constraints: ParameterConstraints!
  controllers: [Controller!]! @derivedFrom(field: "controllerFactory")

  archController: ArchController!
  isRegistered: Boolean!
  removal: ControllerFactoryRemoved @derivedFrom(field: "controllerFactory")
}

type ParameterConstraints @entity(immutable: true) {
  id: ID!
  minimumDelinquencyGracePeriod: Int!
  maximumDelinquencyGracePeriod: Int!
  minimumReserveRatioBips: Int!
  maximumReserveRatioBips: Int!
  minimumDelinquencyFeeBips: Int!
  maximumDelinquencyFeeBips: Int!
  minimumWithdrawalBatchDuration: Int!
  maximumWithdrawalBatchDuration: Int!
  minimumAnnualInterestBips: Int!
  maximumAnnualInterestBips: Int!
}

type NewController @entity(immutable: true) {
  id: ID!
  borrower: Bytes! # address
  controller: Bytes! # address
  namePrefix: String! # string
  symbolPrefix: String! # string
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type UpdateProtocolFeeConfiguration @entity(immutable: true) {
  id: ID!
  feeRecipient: Bytes! # address
  protocolFeeBips: Int! # uint16
  originationFeeAsset: Bytes! # address
  originationFeeAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# -------------------------------------------------------------------------- #
#                          WildcatSanctionsSentinel                          #
# -------------------------------------------------------------------------- #

type NewSanctionsEscrow @entity(immutable: true) {
  id: ID!
  borrower: Bytes! # address
  account: Bytes! # address
  asset: Bytes! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type SanctionOverride @entity(immutable: true) {
  id: ID!
  borrower: Bytes! # address
  account: Bytes! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type SanctionOverrideRemoved @entity(immutable: true) {
  id: ID!
  borrower: Bytes! # address
  account: Bytes! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# -------------------------------------------------------------------------- #
#                              AccessControlHooks                            #
# -------------------------------------------------------------------------- #

type LenderHooksAccess @entity {
  id: ID! # LenderHooksAccess-hooksAddress-lenderAddress
  lender: Bytes! # address
  isBlockedFromDeposits: Boolean!
  lastProvider: AccessControlHooksProvider # address
  canRefresh: Boolean!
  lastApprovalTimestamp: Int!
  hooks: AccessControlHooks! # address
  knownLenderStatuses: [KnownLenderStatus!]! @derivedFrom(field: "lenderStatus")
}

type AccessControlHooks @entity {
  id: ID! # address
  borrower: Bytes! # address
  hooksTemplate: HooksTemplate! # address
  markets: [Market!]! @derivedFrom(field: "hooks")
  providers: [AccessControlHooksProvider!]! @derivedFrom(field: "hooks")
  hooksFactory: HooksFactory!
  eventIndex: Int!
}

type KnownLenderStatus @entity {
  id: ID! #KNOWNLENDER-marketAddress-lenderAddress
  lenderStatus: LenderHooksAccess! # address
  market: Market! # address
}

type AccessControlHooksProvider @entity {
  id: ID! # PROVIDER-hooksAddress-providerAddress
  providerAddress: Bytes! # address
  hooks: AccessControlHooks! # address
  # version: String!
  timeToLive: Int!
  isPullProvider: Boolean!
  pullProviderIndex: Int!
  isApproved: Boolean!
}

type HooksConfig @entity(immutable: true) {
  id: ID! # HOOKSCONFIG-marketAddress
  market: Market!
  hooks: AccessControlHooks!
  useOnDeposit: Boolean!
  useOnQueueWithdrawal: Boolean!
  useOnExecuteWithdrawal: Boolean!
  useOnTransfer: Boolean!
  useOnBorrow: Boolean!
  useOnRepay: Boolean!
  useOnCloseMarket: Boolean!
  useOnNukeFromOrbit: Boolean!
  useOnSetMaxTotalSupply: Boolean!
  useOnSetAnnualInterestAndReserveRatioBips: Boolean!
  useOnSetProtocolFeeBips: Boolean!
  depositRequiresAccess: Boolean!
  queueWithdrawalRequiresAccess: Boolean!
  transferRequiresAccess: Boolean!
}

# event RoleProviderUpdated(
#   address indexed providerAddress,
#   uint32 timeToLive,
#   uint24 pullProviderIndex
# );
type RoleProviderUpdated @entity(immutable: true) {
  id: ID! # PROVIDERUPDATE-hooksAddress-providerAddress-eventIndex
  hooks: AccessControlHooks! # address
  provider: AccessControlHooksProvider! # PROVIDER-hooksAddress-providerAddress
  isPullProvider: Boolean!
  pullProviderIndex: Int!
  timeToLive: Int!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event RoleProviderAdded(
#   address indexed providerAddress,
#   uint32 timeToLive,
#   uint24 pullProviderIndex
# );
type RoleProviderAdded @entity(immutable: true) {
  id: ID! # PROVIDERADD-hooksAddress-providerAddress-eventIndex
  hooks: AccessControlHooks! # address
  provider: AccessControlHooksProvider! # PROVIDER-hooksAddress-providerAddress
  isPullProvider: Boolean!
  pullProviderIndex: Int!
  timeToLive: Int!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event RoleProviderRemoved(address indexed providerAddress, uint24 pullProviderIndex);
type RoleProviderRemoved @entity(immutable: true) {
  id: ID! # PROVIDERREMOVE-hooksAddress-providerAddress-eventIndex
  hooks: AccessControlHooks! # address
  provider: AccessControlHooksProvider! # PROVIDER-hooksAddress-providerAddress
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event AccountBlockedFromDeposits(address indexed accountAddress);
type AccountBlockedFromDeposits @entity(immutable: true) {
  id: ID! # ACCOUNTBLOCKED-hooksAddress-accountAddress-eventIndex
  account: LenderHooksAccess! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event AccountUnblockedFromDeposits(address indexed accountAddress);
type AccountUnblockedFromDeposits @entity(immutable: true) {
  id: ID! # ACCOUNTUNBLOCKED-hooksAddress-accountAddress-eventIndex
  account: LenderHooksAccess! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event AccountMadeFirstDeposit(address indexed accountAddress);
type AccountMadeFirstDeposit @entity(immutable: true) {
  id: ID! # ACCOUNTFIRSTDEPOSIT-marketAddress-accountAddress-eventIndex
  account: LenderHooksAccess! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

type MinimumDepositUpdated @entity (immutable: true) {
  id: ID! #MINIMUMDEPOSITUPDATE-marketAddress-eventIndex
  market: Market!
  hooks: AccessControlHooks!
  oldMinimumDeposit: BigInt
  newMinimumDeposit: BigInt!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event AccountAccessGranted(
#   address indexed providerAddress,
#   address indexed accountAddress,
#   uint32 credentialTimestamp
# );
type AccountAccessGranted @entity(immutable: true) {
  id: ID! # ACCOUNTACCESSGRANTED-hooksAddress-accountAddress-eventIndex
  provider: AccessControlHooksProvider! # PROVIDER-hooksAddress-providerAddress
  account: LenderHooksAccess! # address
  credentialTimestamp: Int!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# event AccountAccessRevoked(address indexed accountAddress);
type AccountAccessRevoked @entity(immutable: true) {
  id: ID! # ACCOUNTACCESSREVOKED-hooksAddress-accountAddress-eventIndex
  account: LenderHooksAccess! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
  eventIndex: Int!
}

# -------------------------------------------------------------------------- #
#                                 HooksFactory                               #
# -------------------------------------------------------------------------- #

type HooksFactory @entity {
  id: ID!
  hooksTemplates: [HooksTemplate!]! @derivedFrom(field: "hooksFactory")
  hooksInstances: [AccessControlHooks!]! @derivedFrom(field: "hooksFactory")
  archController: ArchController!
  isRegistered: Boolean!
  eventIndex: Int!
  sentinel: Bytes! # address
}


# @todo This is brittle. It will break if any other template is used than AccessControlHooks.
# Current workaround is to only bind a hooks instance if it is an AccessControlHooks instance.
type HooksTemplate @entity {
  id: ID! # address
  name: String!
  feeRecipient: Bytes! # address
  protocolFeeBips: Int!
  originationFeeAsset: Bytes! # address
  originationFeeAmount: BigInt!
  deployedInstances: [HooksInstanceDeployed!]! @derivedFrom(field: "hooksTemplate")
  hooksFactory: HooksFactory!
  disabled: Boolean!
}

# event HooksInstanceDeployed(address hooksInstance, address hooksTemplate);
type HooksInstanceDeployed @entity(immutable: true) {
  id: ID!
  hooksTemplate: HooksTemplate!
  hooks: AccessControlHooks! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# event HooksTemplateAdded(
#   address hooksTemplate,
#   string name,
#   address feeRecipient,
#   address originationFeeAsset,
#   uint80 originationFeeAmount,
#   uint16 protocolFeeBips
# );
type HooksTemplateAdded @entity(immutable: true) {
  id: ID! # TEMPLATEADD-template-eventIndex
  hooksTemplate: HooksTemplate! # address
  feeRecipient: Bytes! # address
  protocolFeeBips: Int!
  originationFeeAsset: Bytes! # address
  originationFeeAmount: BigInt!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# event HooksTemplateDisabled(address hooksTemplate);
type HooksTemplateDisabled @entity(immutable: true) {
  id: ID! # TEMPLATEDISABLE-template-eventIndex
  hooksTemplate: HooksTemplate! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# event HooksTemplateFeesUpdated(
#   address hooksTemplate,
#   address feeRecipient,
#   address originationFeeAsset,
#   uint80 originationFeeAmount,
#   uint16 protocolFeeBips
# );
type HooksTemplateFeesUpdated @entity(immutable: true) {
  id: ID! # TEMPLATEFEEUPDATE-template-eventIndex
  hooksTemplate: HooksTemplate! # address
  feeRecipient: Bytes! # address
  protocolFeeBips: Int!
  originationFeeAsset: Bytes! # address
  originationFeeAmount: BigInt!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# -------------------------------------------------------------------------- #
#                           WildcatMarketController                          #
# -------------------------------------------------------------------------- #

type Controller @entity {
  id: ID!
  borrower: Bytes!
  controllerFactory: ControllerFactory! # address
  markets: [Market!]! @derivedFrom(field: "controller")
  authorizedLenders: [LenderAuthorization!]! @derivedFrom(field: "controller")
  authorizationChanges: [LenderAuthorizationChange!]!
    @derivedFrom(field: "controller")

  archController: ArchController!
  isRegistered: Boolean!
  removal: ControllerRemoved @derivedFrom(field: "controller")
}

type LenderAuthorization @entity {
  id: ID! # AUTH-<controller>-<address>
  controller: Controller!
  lender: Bytes!
  authorized: Boolean!
  marketAccounts: [LenderAccount!]!
    @derivedFrom(field: "controllerAuthorization")
  changes: [LenderAuthorizationChange!]! @derivedFrom(field: "authorization")
}

type LenderAuthorizationChange @entity(immutable: true) {
  id: ID!
  controller: Controller!
  lender: Bytes! # address
  authorized: Boolean!
  authorization: LenderAuthorization!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type MarketDeployed @entity(immutable: true) {
  id: ID!
  market: Market! # address
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# -------------------------------------------------------------------------- #
#                                WildcatMarket                               #
# -------------------------------------------------------------------------- #

type LenderAccount @entity {
  id: ID! # LENDER-<market>-<address>
  address: Bytes!
  market: Market!
  scaledBalance: BigInt!
  role: LenderStatus!
  totalDeposited: BigInt!
  lastScaleFactor: BigInt!
  lastUpdatedTimestamp: Int!
  totalInterestEarned: BigInt!
  numPendingWithdrawalBatches: Int!

  controllerAuthorization: LenderAuthorization
  hooksAccess: LenderHooksAccess

  deposits: [Deposit!]! @derivedFrom(field: "account")
  withdrawals: [LenderWithdrawalStatus!]! @derivedFrom(field: "account")
  interestAccrualRecords: [LenderInterestAccrued!]!
    @derivedFrom(field: "account")
}

enum LenderStatus {
  Null
  Blocked
  WithdrawOnly
  DepositAndWithdraw
}

type LenderInterestAccrued @entity(immutable: true) {
  id: ID!
  account: LenderAccount! # address
  market: Market! # address
  interestEarned: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type WithdrawalBatch @entity {
  id: ID! # WDBATCH-<market>-<expiry>
  # batchIndex: Int!
  market: Market!
  expiry: BigInt!
  scaledTotalAmount: BigInt!
  scaledAmountBurned: BigInt!
  normalizedAmountPaid: BigInt!
  normalizedAmountClaimed: BigInt!
  lenderWithdrawalsCount: Int! # number of individual lenders with requests
  completedWithdrawalsCount: Int! # number of individual lenders with completed withdrawals
  totalNormalizedRequests: BigInt! # sum of amounts originally requested
  isExpired: Boolean!
  isClosed: Boolean! # indicates whether the batch is fully paid
  isCompleted: Boolean! # indicates whether all requests have been executed
  paymentsCount: Int!
  lastScaleFactor: BigInt!
  lastUpdatedTimestamp: Int!
  totalInterestEarned: BigInt!

  requests: [WithdrawalRequest!]! @derivedFrom(field: "batch")
  executions: [WithdrawalExecution!]! @derivedFrom(field: "batch")
  payments: [WithdrawalBatchPayment!]! @derivedFrom(field: "batch")
  withdrawals: [LenderWithdrawalStatus!]! @derivedFrom(field: "batch")
  interestAccrualRecords: [WithdrawalBatchInterestAccrued!]!
    @derivedFrom(field: "batch")
  creation: WithdrawalBatchCreated! @derivedFrom(field: "batch")
}

type WithdrawalBatchInterestAccrued @entity(immutable: true) {
  id: ID!
  batch: WithdrawalBatch!
  market: Market! # address
  interestEarned: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type LenderWithdrawalStatus @entity {
  id: ID! # WDSTAT-<market>-<expiry>-<lender>
  requestsCount: Int!
  executionsCount: Int!
  account: LenderAccount!
  batch: WithdrawalBatch!
  scaledAmount: BigInt!
  normalizedAmountWithdrawn: BigInt!
  totalNormalizedRequests: BigInt! # sum of amounts originally requested
  isCompleted: Boolean!
  requests: [WithdrawalRequest!]! @derivedFrom(field: "status")
  executions: [WithdrawalExecution!]! @derivedFrom(field: "status")
}

type Token @entity(immutable: true) {
  id: ID!
  address: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
  isMock: Boolean!
}

type Market @entity {
  id: ID!
  archController: ArchController!
  isRegistered: Boolean!
  version: MarketVersion!
  # ---------------------------------- Config -------------------------------- #
  controller: Controller
  hooksFactory: HooksFactory
  hooksConfig: HooksConfig  @derivedFrom(field: "market")
  hooks: AccessControlHooks # address

  borrower: Bytes!
  sentinel: Bytes!
  feeRecipient: Bytes!

  name: String!
  symbol: String!
  decimals: Int!
  protocolFeeBips: Int!
  delinquencyGracePeriod: Int!
  delinquencyFeeBips: Int!
  asset: Token!
  withdrawalBatchDuration: Int!
  minimumDeposit: BigInt

  # ---------------------------------- State --------------------------------- #
  isClosed: Boolean!
  maxTotalSupply: BigInt!
  pendingProtocolFees: BigInt!
  # Underlying assets reserved for withdrawals which have been paid
  # by the borrower but not yet executed.
  normalizedUnclaimedWithdrawals: BigInt!
  # Scaled token supply (divided by scaleFactor)
  scaledTotalSupply: BigInt!
  #  Scaled amount in withdrawal batches that have not been paid by borrower
  scaledPendingWithdrawals: BigInt!
  pendingWithdrawalExpiry: BigInt!
  # Whether market is currently delinquent (liquidity under requirement)
  isDelinquent: Boolean!
  # Seconds borrower has been delinquent
  timeDelinquent: Int!
  # Annual interest rate accrued to lenders, in basis points
  annualInterestBips: Int!
  # Percentage of outstanding balance that must be held in liquid reserves
  reserveRatioBips: Int!
  # Ratio between internal balances and underlying token amounts
  scaleFactor: BigInt!
  lastInterestAccruedTimestamp: Int!

  originalAnnualInterestBips: Int!
  originalReserveRatioBips: Int!
  temporaryReserveRatioExpiry: Int!
  temporaryReserveRatioActive: Boolean!

  # -------------------------------- Metadata -------------------------------- #
  # all time borrows
  totalBorrowed: BigInt!
  # all time DebtRepaid amounts
  totalRepaid: BigInt!
  # all time earnings from base APR
  totalBaseInterestAccrued: BigInt!
  # all time earnings from delinquency fees
  totalDelinquencyFeesAccrued: BigInt!
  # all time protocol fees
  totalProtocolFeesAccrued: BigInt!
  # all time deposits
  totalDeposited: BigInt!

  eventIndex: Int!
  delinquencyStatusChangedIndex: Int!
  borrowIndex: Int!
  depositIndex: Int!
  feesCollectedIndex: Int!
  debtRepaidIndex: Int!
  maxTotalSupplyUpdatedIndex: Int!
  annualInterestBipsUpdatedIndex: Int!
  withdrawalRequestsIndex: Int!

  # ------------------------------- Dependents ------------------------------- #
  withdrawalBatches: [WithdrawalBatch!]! @derivedFrom(field: "market")
  lenders: [LenderAccount!]! @derivedFrom(field: "market")

  createdAt: Int!

  # --------------------------------- Events --------------------------------- #
  deployedEvent: MarketDeployed!
  marketClosedEvent: MarketClosed @derivedFrom(field: "market")
  removal: MarketRemoved @derivedFrom(field: "market")
  interestAccrualRecords: [MarketInterestAccrued!]!
    @derivedFrom(field: "market")
  delinquencyRecords: [DelinquencyStatusChanged!]! @derivedFrom(field: "market")
  borrowRecords: [Borrow!]! @derivedFrom(field: "market")
  depositRecords: [Deposit!]! @derivedFrom(field: "market")
  feeCollectionRecords: [FeesCollected!]! @derivedFrom(field: "market")
  repaymentRecords: [DebtRepaid!]! @derivedFrom(field: "market")
  reserveRatioBipsUpdatedRecords: [ReserveRatioBipsUpdated!]!
    @derivedFrom(field: "market")
  annualInterestBipsUpdatedRecords: [AnnualInterestBipsUpdated!]!
    @derivedFrom(field: "market")
  maxTotalSupplyUpdatedRecords: [MaxTotalSupplyUpdated!]!
    @derivedFrom(field: "market")
  withdrawalRequestRecords: [WithdrawalRequest!]! @derivedFrom(field: "market")
}

type MarketInterestAccrued @entity(immutable: true) {
  id: ID!
  market: Market! # address
  fromTimestamp: Int!
  toTimestamp: Int!
  timeWithPenalties: Int!
  baseInterestRay: BigInt! # uint256
  delinquencyFeeRay: BigInt! # uint256
  baseInterestAccrued: BigInt! # uint256
  delinquencyFeesAccrued: BigInt! # uint256
  protocolFeesAccrued: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type DelinquencyStatusChanged @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  delinquencyStatusChangedIndex: Int!
  eventIndex: Int!
  market: Market! # address
  isDelinquent: Boolean! # bool
  liquidityCoverageRequired: BigInt! # uint256
  totalAssets: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type AnnualInterestBipsUpdated @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  market: Market!
  annualInterestBipsUpdatedIndex: Int!
  eventIndex: Int!
  oldAnnualInterestBips: Int! # uint256
  newAnnualInterestBips: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# type AuthorizationStatusUpdated @entity(immutable: true) {
#   id: ID!
#   account: Bytes! # address
#   role: Int! # uint8
#   blockNumber: Int!
#   blockTimestamp: Int!
#   transactionHash: Bytes!
# }

type Borrow @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  borrowIndex: Int!
  eventIndex: Int!
  market: Market!
  assetAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type DebtRepaid @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  debtRepaidIndex: Int!
  eventIndex: Int!
  from: Bytes! # address
  market: Market!
  assetAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  depositIndex: Int!
  eventIndex: Int!
  account: LenderAccount! # address
  market: Market! # address
  assetAmount: BigInt! # uint256
  scaledAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type FeesCollected @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  feesCollectedIndex: Int!
  eventIndex: Int!
  market: Market! # address
  feesCollected: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type MarketClosed @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  eventIndex: Int!
  market: Market! # address
  timestamp: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type MaxTotalSupplyUpdated @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  maxTotalSupplyUpdatedIndex: Int!
  eventIndex: Int!
  market: Market! # address
  oldMaxTotalSupply: BigInt! # uint256
  newMaxTotalSupply: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type ReserveRatioBipsUpdated @entity(immutable: true) {
  id: ID!
  market: Market! # address
  oldReserveRatioBips: Int! # uint256
  newReserveRatioBips: Int! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type SanctionedAccountAssetsQueuedForWithdrawal @entity(immutable: true) {
  id: ID!
  account: Bytes! # address
  scaledAmount: BigInt! # uint256
  normalizedAmount: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}
type SanctionedAccountAssetsSentToEscrow @entity(immutable: true) {
  id: ID!
  account: Bytes! # address
  escrow: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type SanctionedAccountWithdrawalSentToEscrow @entity(immutable: true) {
  id: ID!
  account: Bytes! # address
  escrow: Bytes! # address
  expiry: BigInt! # uint32
  amount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# type StateUpdated @entity(immutable: true) {
#   id: ID!
#   scaleFactor: BigInt! # uint256
#   isDelinquent: Boolean! # bool
#   blockNumber: Int!
#   blockTimestamp: Int!
#   transactionHash: Bytes!
# }

type Transfer @entity(immutable: true) {
  id: ID!
  market: Market!
  from: LenderAccount! # address
  to: LenderAccount! # address
  amount: BigInt! # uint256
  scaledAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# type WithdrawalBatchClosed @entity(immutable: true) {
#   id: ID!
#   batch: WithdrawalBatch!
#   blockNumber: Int!
#   blockTimestamp: Int!
#   transactionHash: Bytes!
# }

type WithdrawalBatchCreated @entity(immutable: true) {
  id: ID!
  batch: WithdrawalBatch!
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type WithdrawalBatchExpired @entity(immutable: true) {
  id: ID!
  batch: WithdrawalBatch!
  scaledTotalAmount: BigInt! # uint256
  scaledAmountBurned: BigInt! # uint256
  normalizedAmountPaid: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type WithdrawalBatchPayment @entity(immutable: true) {
  id: ID! # `WDPMT-<market>-<expiry>-<payment index>`
  batch: WithdrawalBatch!
  scaledAmountBurned: BigInt! # uint256
  normalizedAmountPaid: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type WithdrawalExecution @entity(immutable: true) {
  id: ID! # WDEXEC-<market>-<account>-<expiry>-<lender>-<execution index>
  account: LenderAccount!
  status: LenderWithdrawalStatus!
  batch: WithdrawalBatch!
  normalizedAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

type WithdrawalRequest @entity(immutable: true) {
  id: ID! # RECORD-<market>-<eventIndex>
  withdrawalRequestsIndex: Int!
  eventIndex: Int!
  requestIndex: Int!
  account: LenderAccount!
  status: LenderWithdrawalStatus!
  batch: WithdrawalBatch!
  market: Market!
  scaledAmount: BigInt! # uint256
  normalizedAmount: BigInt! # uint256
  blockNumber: Int!
  blockTimestamp: Int!
  transactionHash: Bytes!
}

# -------------------------------------------------------------------------- #
#                                   Queries                                  #
# -------------------------------------------------------------------------- #

# fragment LenderProperties on LenderAccount {
#   id
#   address
#   scaledBalance
#   role
#   totalDeposited
#   lastScaleFactor
#   lastUpdatedTimestamp
#   totalInterestEarned
#   numPendingWithdrawalBatches
# }

# fragment MarketConfig on Market {
#   controller {
#     id
#   }
#   borrower
#   sentinel
#   feeRecipient
#   name
#   symbol
#   decimals
#   protocolFeeBips
#   delinquencyGracePeriod
#   delinquencyFeeBips
#   asset
#   withdrawalBatchDuration
# }

# fragment MarketState on Market {
#   isClosed
#   maxTotalSupply
#   pendingProtocolFees
#   normalizedUnclaimedWithdrawals
#   scaledTotalSupply
#   scaledPendingWithdrawals
#   pendingWithdrawalExpiry
#   isDelinquent
#   timeDelinquent
#   annualInterestBips
#   reserveRatioBips
#   scaleFactor
#   lastInterestAccruedTimestamp
# }

# fragment MarketMetadata on Market {
#   isRegistered
#   totalBorrowed
#   totalRepaid
#   totalBaseInterestAccrued
#   totalDelinquencyFeesAccrued
#   totalProtocolFeesAccrued
#   totalDeposited
# }

# fragment WithdrawalBatchPaymentProperties on WithdrawalBatchPayment {
#   scaledAmountBurned
#   normalizedAmountPaid
#   blockNumber
#   blockTimestamp
#   transactionHash
# }
# fragment WithdrawalRequestProperties on WithdrawalRequest {
#   scaledAmount
#   normalizedAmount
#   blockNumber
#   blockTimestamp
#   transactionHash
# }
# fragment WithdrawalExecutionProperties on WithdrawalExecution {
#   normalizedAmount
#   blockNumber
#   blockTimestamp
#   transactionHash
# }

# fragment LenderWithdrawalProperties on LenderWithdrawalStatus {
#   id
#   requestsCount
#   executionsCount
#   scaledAmount
#   normalizedAmountWithdrawn
#   totalNormalizedRequests
#   isCompleted
# }

# fragment WithdrawalBatchProperties on WithdrawalBatch {
#   id
#   expiry
#   scaledTotalAmount
#   scaledAmountBurned
#   normalizedAmountPaid
#   normalizedAmountClaimed
#   totalNormalizedRequests
#   isExpired
#   isClosed
#   paymentsCount
#   lastScaleFactor
#   lastUpdatedTimestamp
#   totalInterestEarned

#   payments {
#     ...WithdrawalBatchPaymentProperties
#   }
# }

# query getLenderAccountForMarket($market: ID!, $lender: Bytes!) {
#   market(id: $market) {
#     lenders(where: { address: $lender }) {
#       ...LenderProperties
#       withdrawals(where: { isCompleted: false }) {
#         ...LenderWithdrawalProperties

#         batch {
#           ...WithdrawalBatchProperties
#         }
#         requests {
#           ...WithdrawalRequestProperties
#         }
#         executions {
#           ...WithdrawalExecutionProperties
#         }
#       }
#       market {
#         scaleFactor
#       }
#     }
#   }
# }

# query getAccountsWhereLenderAuthorized($lender: Bytes!) {
#   lenderAuthorizations(where: { lender: $lender, authorized: true }) {
#     controller {
#       markets {
#         lenders(where: { address: $lender }) {
#           ...LenderProperties
#           withdrawals(where: { isCompleted: false }) {
#             ...LenderWithdrawalProperties
#             batch {
#               ...WithdrawalBatchProperties
#             }
#             requests {
#               ...WithdrawalRequestProperties
#             }
#             executions {
#               ...WithdrawalExecutionProperties
#             }
#           }
#           market {
#             ...MarketConfig
#             ...MarketState
#             ...MarketMetadata
#           }
#         }
#       }
#     }
#   }
# }

# query getMarketsForBorrower($borrower: Bytes!) {
#   controllers(where: { borrower: $borrower }) {
#     markets {
#       ...MarketConfig
#       ...MarketState
#       ...MarketMetadata
#     }
#   }
# }

# query getAllPendingWithdrawalBatchesForMarket($market: ID!) {
#   market(id: $market) {
#     withdrawalBatches(where: { isClosed: false }) {
#       ...WithdrawalBatchProperties

#       withdrawals {
#         account {
#           address
#         }
#         ...LenderWithdrawalProperties
#       }
#       requests {
#         account {
#           address
#         }
#         ...WithdrawalRequestProperties
#       }
#       executions {
#         account {
#           address
#         }
#         ...WithdrawalExecutionProperties
#       }
#     }
#   }
# }

# query getAllMarkets {
#   markets {
#     ...MarketConfig
#     ...MarketState
#     ...MarketMetadata
#   }
# }

# query getAuthorizedLendersByController($controller: ID!) {
#   controller(id: $controller) {
#     authorizedLenders(where: { authorized: true }) {
#       lender
#     }
#   }
# }

# query getAuthorizedLendersByMarket($market: ID!) {
#   market(id: $market) {
#     controller {
#       authorizedLenders(where: { authorized: true }) {
#         lender
#       }
#     }
#   }
# }

# query getAuthorizedLendersByBorrower($borrower: Bytes!) {
#   controllers(where: { borrower: $borrower }) {
#     authorizedLenders(where: { authorized: true }) {
#       lender
#     }
#   }
# }

# query getLenderAuthorizationsForMarket($market: ID!, $lender: Bytes!) {
#   market(id: $market) {
#     controller {
#       authorizedLenders(where: { lender: $lender }) {
#         lender
#         authorized
#       }
#     }
#   }
# }
